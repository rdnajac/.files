vim.opt.backupdir = vim.fn.stdpath('state') .. '/backup//'
vim.opt.mousescroll = 'hor:0'

require('nvim.ui')
require('munchies')
require('nvim.autocmds')
require('nvim.diagnostics')
require('nvim.keymaps')
require('nvim.treesitter')

require('utils.link').setup()

-- Refer to :h vim.lsp.config() for more information.
vim.lsp.config('*', {
  -- capabilities = require('blink.cmp').get_lsp_capabilities(),
  capabilities = require('blink.cmp').get_lsp_capabilities(nil, true),
  on_attach = function(client, bufnr)
    local opts = { buffer = bufnr }

    print('LSP attached: ' .. client.name)

    -- Keymaps
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', 'go', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', 'gs', vim.lsp.buf.signature_help, opts)

    -- Inlay hints (Neovim 0.10+)
    if client.supports_method('textDocument/inlayHint') then
      vim.lsp.inlay_hint.enable(true, opts)
    end

    -- CodeLens
    if client.supports_method('textDocument/codeLens') then
      vim.lsp.codelens.refresh()

      vim.api.nvim_create_autocmd({ 'BufEnter', 'CursorHold', 'InsertLeave' }, {
        buffer = bufnr,
        callback = vim.lsp.codelens.refresh,
      })
    end
  end,
})

vim.lsp.enable({
  'luals',
  'clangd',
  'bash-language-server',
  'marksman',
  'r_language-server',
  'ruff',
})

-- Snacks.util.on_module('blink.cmp', function()
--   local blink = require('blink.cmp')
--   if blink.get_lsp_capabilities then
--     vim.lsp._default_config.capabilities = vim.tbl_deep_extend(
--       'force',
--       vim.lsp._default_config.capabilities or vim.lsp.protocol.make_client_capabilities(),
--       blink.get_lsp_capabilities()
--     )
--   end
-- end)
