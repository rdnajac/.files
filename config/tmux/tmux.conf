# vim: fdm=marker:fdl=1:nowrap
# check out https://github.com/gpakosz/.tmux/blob/master/.tmux.conf

# Make sure tmux can find the scripts it needs
set-environment -g PATH "$PATH:$HOME/.config/tmux/bin"
set-environment -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins/"

# bind-key r run-shell "tmux source-file ${TMUX_CONF} > /dev/null; tmux display-message 'sourced tmux configuration!'"
# use the tmux variable current_file anf format that line
# bind-key r run-shell "tmux source-file #{current_file} > /dev/null"
# display-message 'sourcing:  #{current_file}!'"
# display-message 'basename:  #{b:current_file}!'"
# display-message 'dirname  #{d:current_file}!'"

# tmux source-file #{} > /dev/null; 
# bind r source-file -F "#{current_file}" \; display-message "Reloaded tmux config!"
# bind r display-message -F "Reloaded #{current_file}!"
# setenv -gF tmux_conf_file '#{current_file}'
# bind r source-file -F '#{current_file}'
# HACK: Set the environment variable to the current file to access it with tmux format?
set-environment -Fhg config_file "#{current_file}"
bind r source-file -F "#{config_file}" \; display-message "Reloaded #{config_file}!"

set -s escape-time 69
set -g bell-action none
set -g focus-events on
set -g visual-activity on
set -g monitor-activity on
set -g history-limit 50000
set -g default-terminal "tmux-256color"
# set -as terminal-features ",alacritty*:RGB"
set -ga terminal-overrides ",*256col*:Tc"
# set -ga terminal-overrides ",alacritty:Tc"
# set -sa terminal-overrides ',xterm-256color:RGB'
set -g mouse on
# unbind -n MouseDrag1Pane
unbind -Tcopy-mode MouseDrag1Pane

# keymaps {{{
set -g prefix2 C-f
bind f send-prefix
bind b send-prefix
bind | split-window -h     # split panes horizontally `"`
bind - split-window -v     # split panes vertically `%`
bind Tab next-window       # cycle through windows
bind i set status          # toggle status bar
bind q break-pane
unbind n
bind n new-window

# resize panes with prefix + arrow
bind -r Up resize-pane -U 5
bind -r Down resize-pane -D 5
bind -r Left resize-pane -L 5
bind -r Right resize-pane -R 5

bind \\ set-window-option synchronize-panes\; display-message "\
synchronize-panes = #{?pane_synchronized,on,off}"


if-shell "uname | grep -q Darwin" {
  #set -g default-command "reattach-to-user-namespace -l $SHELL"
  bind-key -T copy-mode-vi 'y'    send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
  bind-key -T copy-mode-vi Enter  send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
}
# TODO: no status bar for vim terminals or nested sessions over ssh {{{
# is_vim="ps -o comm= -t '#{pane_tty}' | grep -iqE '^(n?vim|view)$'"
# set-hook -g pane-active 'if-shell "$is_vim" "set-option -g status off" "set-option -g status on"'
# if-shell "$is_vim" "set-option -g status off" "set-option -g status on"
# FIXME:
# set-hook -g after-new-session 'run-shell "
#   if [ #{==:#{session_name},snacks-sesh} ]; then
#     tmux set -g status off;
#   fi
# "'
# }}}

# Use custom status bar in another file
source-file ~/.config/tmux/mystatusbar.conf

# copy/paste
if-shell "uname | grep -q Darwin" {
  source-file ~/.config/tmux/copy-macos.conf
} {
  source-file ~/.config/tmux/copy-linux.conf
}

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
