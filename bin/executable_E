#!/usr/bin/env bash
set -euo pipefail

NVIM_SOCK="${NVIM_SOCK:-${XDG_RUNTIME_DIR:-$HOME/.cache}/nvim/server.pipe}"
TMUX_PANE_NAME="${TMUX_PANE_NAME:-nvim_visual}"
NNN_SPLITSIZE="${NNN_SPLITSIZE:-80}"

usage() {
  cat << EOF
Usage: $0 [-f] [-t] [--] [nvim-flags] [file...]
  -f       force plain nvim (skip socket)
  -t       open in tmux split if no socket
  --       end of options
EOF
  exit 1
}

resolve() {
  realpath "$1" 2>/dev/null ||
  readlink -f "$1" 2>/dev/null ||
  printf '%s/%s\n' "$PWD" "$1"
}

skip_socket=false
tmux_split=false

while getopts "ft" opt; do
  case $opt in
    f) skip_socket=true ;;
    t) tmux_split=true ;;
    *) OPTIND=$((OPTIND-1)); break ;;
  esac
done
shift $((OPTIND-1))

[[ ${1:-} == "--" ]] && shift

# collect args: resolve paths, leave flags intact
args=()
for a; do
  if [[ $a == -* ]]; then
    args+=("$a")
  else
    args+=("$(resolve "$a")")
  fi
done

# default: no args â†’ keep args empty, so nvim opens dashboard or empty buffer

# socket branch: connect or start listener
if ! $skip_socket; then
  if [[ -S $NVIM_SOCK ]]; then
    exec nvim --server "$NVIM_SOCK" --remote "${args[@]}"
  else
    exec nvim --listen "$NVIM_SOCK" "${args[@]}"
  fi
fi

# inside nvim already: nothing to do
if [[ -n ${NVIM:-} ]]; then
  exit 0
fi

# tmux split branch
if $tmux_split && [[ -n ${TMUX:-} ]]; then
  tmux split-window -h -p "$NNN_SPLITSIZE" "nvim ${args[*]}"
  tmux select-pane -T "$TMUX_PANE_NAME"
  exit
fi

# fallback
exec nvim "${args[@]}"
