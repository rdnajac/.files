#!/usr/bin/env bash

set -euo pipefail

NVIM_SOCK="${NVIM_SOCK:-${XDG_RUNTIME_DIR:-$HOME/.cache}/nvim/server.pipe}"
TMUX_PANE_NAME="${TMUX_PANE_NAME:-nvim_visual}"
NNN_SPLITSIZE="${NNN_SPLITSIZE:-80}"

usage() {
	cat <<EOF
Usage: $0 [-s] [-n] [-t] [--] <file1> [file2...]
  -s    Use nvim socket if available
  -n    Force new nvim instance in a tmux split (if in tmux)
  -t    Use tmux even if socket is available (overrides -s)
  --    End of options
EOF
	exit 1
}

resolve_path() {
	realpath "$1" 2>/dev/null || readlink -f "$1" 2>/dev/null || echo "$PWD/$1"
}

use_socket=false
force_tmux=false

while getopts ":snt" opt; do
	case ${opt} in
	s) use_socket=true ;;
	n) force_tmux=true ;;
	t)
		force_tmux=true
		use_socket=false
		;;
	*) usage ;;
	esac
done
shift $((OPTIND - 1))

[ "$#" -eq 0 ] && usage

resolved_args=()
for arg in "$@"; do
	resolved_args+=("$(resolve_path "$arg")")
done

if [[ ${NVIM:-} != "" ]]; then
	echo "NVIM is set. exiting..."
	exit 1
fi

if "$use_socket" && [[ -S $NVIM_SOCK ]]; then
	nvim --server "$NVIM_SOCK" --remote "${resolved_args[@]}"
	exit $?
fi

if "$force_tmux" || ([ "${NNNLVL:-}" != "" ] && [ "${TMUX:-}" != "" ]); then
	tmux split-window -h -p "$NNN_SPLITSIZE" "nvim ${resolved_args[*]}"
	tmux select-pane -T "$TMUX_PANE_NAME"
else
	nvim "${resolved_args[@]}"
fi
